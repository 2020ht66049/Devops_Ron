Today's Agenda:
===============

- Docker installation
  [Link] > https://docs.docker.com/engine/install/

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

# Add the repository to Apt sources:
echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

   [Alternative way]
https://get.docker.com/
curl -fsSL https://get.docker.com -o install-docker.sh

- How to validate docker version [docker --version]
root@ip-172-31-26-10:~# docker --version
Docker version 24.0.6, build ed223bc
<Major-version>.<minor-version>.<fixpack>

- Image vs container
Image is packging application and dependancy into a file.
Example: Suppose, I want to print hello world in centos
FROM centos
CMD echo "Hello-world"

Container: Container is instance[runtime server] from image

root@ip-172-31-26-10:~# docker ps -all
CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS                     PORTS     NAMES
28dafa07209c   image1    "/bin/sh -c 'echo \"H…"   8 seconds ago   Exited (0) 7 seconds ago             bold_antonelli
root@ip-172-31-26-10:~#

- Giving name to container[What is we are not giving name to container]
If we want to give name to container then we need give by keyword --name, but if we are not giving any name then docker by defult assign one randoam name Noun_verb[Mostly]
docker run --name Ron image1

- Why my container is getting existed[terminated]
The default behaviour of conatainer is to get terminated once task is done
FROM ubuntu
CMD echo "Hello-wold"

- I dont want my container to get terminated?
FROM ubuntu
CMD sleep 1d # container will sleep 1 days

> We are not gatting terminal back because container work in attached mode, if we want terminal to back normal then we need to run container in detached mode
docker run -d[detached mode] imagename

root@ip-172-31-26-10:~# docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES
d5b1f99086b5   image2    "/bin/sh -c 'sleep 1…"   2 minutes ago   Up 2 minutes             amazing_clarke
root@ip-172-31-26-10:~# docker run -d image2
4f82ccc72c663b1fb99e41bae38b1a17d79e8e736f627486ead5c01024c27727
root@ip-172-31-26-10:~# docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES
4f82ccc72c66   image2    "/bin/sh -c 'sleep 1…"   18 seconds ago   Up 17 seconds             sharp_shockley
d5b1f99086b5   image2    "/bin/sh -c 'sleep 1…"   3 minutes ago    Up 3 minutes              amazing_clarke

- I want to login and perform some operation inside container
  docker exec -it container name /bin/bash[shell]

- Different instruction to create docker image
FROM: To choose OS
RUN: To perform any installation[provisining]
CMD: To execute command
WORKDIR: change the director
EXPOSE: Opening a port
ENTRYPOINT: it's similar to CMD but it's value is fixed, it can be overwitten
COPY: if we want to copy thing from localhost to container[COPY source destination]
ADD: if we want to download anything from HTTP URL then we need to user this.[ADD URL .]
VOLUME: volume volume-location # We are not using it actively

Volume explaination: Suppose, I want to add storage of 50 GB[/usr/home/loc1] to my container

root@ip-172-31-26-10:~# docker run image3
Hi Ron and Umesh
root@ip-172-31-26-10:~# cat dockerfile
FROM centos
CMD echo "Hello Ron"
CMD echo "Hi Ron and Umesh"

#1 >if we have multple CMD command then last one would be executed.
#2 >you can override the CMD instruction by passing them as command line

- Port forwarding
Whenever we are creating any instance, by default that has available for range from 0 to 65535

I want my container 1 to user hostport 8080 and container port 8080
-p 8080[hostport]:8080[container port]

I want my container 2 to user hostport 8080 and container port 8080
-p 8080[hostport]:8080[container port] # This command will give error because host port 8080n is already in use by container1.

- Image size optimization
I want to print hello world
1) Ubuntu
2) Centos
3) Apline

Alway recomended to use the best base image.

docker image ls > this command list out the available image in local image store

- Docker cheatsheet

Create a docker image with java17 and GIT installed in it
FROM ubuntu > Layer1
RUN apt-get update > layer2
RUN apt install openjdk-17-jdk > layer3
RUN apt-get update > layer4
RUN apt install GIT > layer5

Here, Layer 2 and layer 4 are same, so, docker will internally use it from cache, and now it will have 5 layer for me, but 4 layer for docker.

Docker login: I have authenticated my host with docker hub, now I can push images to docker hub
============
root@ip-172-31-26-10:~# docker login
Log in with your Docker ID or email address to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com/ to create one.
You can log in with your password or a Personal Access Token (PAT). Using a limited-scope PAT grants better security and is required for organizations using SSO. Learn more at https://docs.docker.com/go/access-tokens/

Username: 2020ht66049
Password:
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded

Docker push
===========
docker tag local-image:tagname new-repo:tagname
docker push new-repo:tagname

docker push 2020ht66049/ron:tagname

docker tag image2 2020ht66049/image2:8.2.2
docker push 2020ht66049/image2:8.2.2

- image tag
lets say their are different version from OS like 16.04, 18.04, 20.04 and 22.04(latest) 
FROM ubuntu or from ubuntu:latest or from ubuntu:22.04 are same, but let say my requirement is to use ubuntu 18.04 then
from ubuntu:18.04

- Multi stage docker build
Here we will use 2 from statement, from first from statement and commands we would be creating artifact, and that artifact we would be using in the next step to reduce image size.

Artifact: saving something for future use


git clone https://github.com/spring-projects/spring-petclinic.git
cd spring-petclinic
./mvnw package
java -jar target/*.jar

Dockerfile context:
FROM ubuntu
RUN apt-get update
RUN apt install openjdk-17-jre-headless -y
RUN apt-get update
RUN apt install git -y
RUN git clone https://github.com/spring-projects/spring-petclinic.git
WORKDIR spring-petclinic
RUN ./mvnw clean package -DskipTests
CMD java -jar target/*.jar

- Docker compose
    It's actually one of the application provided by docker to create application.[https://docs.docker.com/compose/]
    No one uses it.

- Docker networking
    It's a way to create communcation between 2 container


- Docker on Windows
in earlier days[10 or 15 yrs back or more than that]
info.sh > Linux
info.bat > windows

docker was not supported in earlier edition, but from window 10 onwards they started supporting docker, and all the concept would remain same.

- Docker swarm
 So far we are doing all the practice in 1 host, but in real time we required multiple host, for that docker has solution called docker swarm
